{
  "_args": [
    [
      "netjsongraph.js",
      "/home/whatbatman/Documents/code/golang/src/pcapanalyzer"
    ]
  ],
  "_from": "netjsongraph.js",
  "_id": "netjsongraph.js@0.1.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/netjsongraph.js",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "netjsongraph.js",
    "rawSpec": "netjsongraph.js",
    "scope": null,
    "spec": "/home/whatbatman/Documents/code/golang/src/pcapanalyzer/netjsongraph.js",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:netjsongraph.js",
  "_shasum": "069502f364f8401c1bb2c337ccada47f8d72a002",
  "_shrinkwrap": null,
  "_spec": "netjsongraph.js",
  "_where": "/home/whatbatman/Documents/code/golang/src/pcapanalyzer",
  "author": {
    "email": "federico.capoano@gmail.com",
    "name": "Federico Capoano",
    "url": "http://nemesisdesign.net/"
  },
  "bugs": {
    "url": "https://github.com/netjson/netjsongraph.js/issues"
  },
  "contributors": [
    {
      "name": "GeekPlux",
      "email": "geekplux@gmail.com",
      "url": "http://geekplux.com/"
    }
  ],
  "dependencies": {
    "d3": "^4.9.1"
  },
  "description": "NetJson format data visualization",
  "devDependencies": {
    "autoprefixer": "^6.5.1",
    "babel-core": "^6.14.0",
    "babel-eslint": "^7.0.0",
    "babel-loader": "^6.2.5",
    "babel-preset-es2015": "^6.14.0",
    "css-loader": "^0.25.0",
    "eslint": "^3.8.1",
    "eslint-config-airbnb-base": "^11.2.0",
    "eslint-config-standard": "^6.2.0",
    "eslint-loader": "^1.6.0",
    "eslint-plugin-import": "^2.3.0",
    "eslint-plugin-promise": "^3.0.0",
    "eslint-plugin-standard": "^2.0.1",
    "file-loader": "^0.9.0",
    "json-loader": "^0.5.4",
    "postcss-loader": "^0.13.0",
    "precss": "^1.4.0",
    "style-loader": "^0.13.1",
    "url-loader": "^0.5.7",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.15.1"
  },
  "gitHead": "97c512700b041146f52b2d8f1a34fb96acec120e",
  "homepage": "https://github.com/netjson/netjsongraph.js#readme",
  "keywords": [
    "data",
    "netjson",
    "network",
    "visualization"
  ],
  "license": "BSD 3-clause",
  "main": "index.js",
  "name": "netjsongraph.js",
  "optionalDependencies": {},
  "readme": "netjsongraph.js\n===============\n\n.. image:: https://raw.githubusercontent.com/interop-dev/netjsongraph.js/master/docs/netjsongraph-default.png\n\nLeverage the power of `d3.js <http://d3js.org/>`__ to visualize network topology using the\n`NetJSON <http://netjson.org>`__ ``NetworkGraph`` format.\n\nBuild powerful and interoperable visualizations without losing flexibility!\n\n**This library is still in early stages, feedback and contributions are very welcome**.\n\nExamples:\n\n* `default style <https://nodeshot.org/netjsongraph/examples/index.html>`__\n* `dark green example <https://nodeshot.org/netjsongraph/examples/dark.html>`__\n* `light green example <https://nodeshot.org/netjsongraph/examples/green.html>`__\n* `custom attributes example <https://nodeshot.org/netjsongraph/examples/custom-attributes.html>`__\n* `NetJSON NetworkCollection example <https://nodeshot.org/netjsongraph/examples/network-collection.html>`__\n* `callbacks example <https://nodeshot.org/netjsongraph/examples/callbacks.html>`__\n\nInstall\n-------\n\n.. code-block:: bash\n\n    # install via yarn\n    yarn add netjsongraph.js --save\n\n    # or install via npm\n    npm install netjsongraph.js --save\n\nArguments\n---------\n\n*netjsongraph.js* accepts two arguments\n\n1. ``url`` (**required**, string): URL to fetch the JSON data from\n2. ``options`` (optional, object): custom options described below\n    * ``el``: container element, defaults to ``\"body\"``\n    * ``metadata``: whether to show `NetJSON <http://netjson.org>`__ ``NetworkGraph`` metadata or not, defaults to ``true``\n    * ``defaultStyle``: whether to use the default style or not, defaults to ``true``\n    * ``scaleExtent``: see `d3 Zoom scaleExtent <https://github.com/mbostock/d3/wiki/Zoom-Behavior#scaleExtent>`__, defaults to ``[0.25, 5]``\n    * ``charge``: see `d3 Zoom charge <https://github.com/mbostock/d3/wiki/Force-Layout#charge>`__, defaults to ``-130``\n    * ``linkDistance``: see `d3 Zoom linkDistance <https://github.com/mbostock/d3/wiki/Force-Layout#linkDistance>`__, defaults to ``50``,\n    * ``linkStrength``: see `d3 Zoom linkStrength <https://github.com/mbostock/d3/wiki/Force-Layout#linkStrength>`__, defaults to ``0.2``,\n    * ``friction``: see `d3 Zoom friction <https://github.com/mbostock/d3/wiki/Force-Layout#friction>`__, defaults to ``0.9``\n    * ``chargeDistance``: see `d3 Zoom chargeDistance <https://github.com/mbostock/d3/wiki/Force-Layout#chargeDistance>`__, defaults to ``Infinity``\n    * ``theta``: see `d3 Zoom theta <https://github.com/mbostock/d3/wiki/Force-Layout#theta>`__, defaults to ``0.8``\n    * ``gravity``: see `d3 Zoom gravity <https://github.com/mbostock/d3/wiki/Force-Layout#gravity>`__, defaults to ``0.1``\n    * ``nodeClassProperty``: if specified, nodes will have an additional CSS class that depends on the value of a specific NetJSON node property\n    * ``linkClassProperty``: if specified, links will have an additional CSS class that depends on the value of a specific NetJSON link property\n    * ``circleRadius``: radius of circles (nodes) in pixel, defalts to ``8``\n    * ``labelDx``: SVG dx (distance on x axis) attribute of node labels in graph ``0``\n    * ``labelDy``: SVG dy (distance on y axis) attribute of node labels in graph ``-1.3em``\n    * ``onInit``: callback function executed on initialization, params: ``url`` and ``options``\n    * ``onLoad``: callback function executed after data has been loaded, params: ``url`` and ``options``\n    * ``onEnd``: callback function executed when initial animation is complete, params: ``url`` and ``options``\n    * ``linkDistanceFunc``: by default high density areas have longer links, you can tweak this behaviour if you need\n    * ``redraw``: function called when panning and zooming, you can tweak it if you need\n    * ``prepareData``: function used to convert NetJSON NetworkGraph to the javascript data structured used internally, you won't need to modify it in most cases\n    * ``onClickNode``: function called when a node is clicked, you can customize it if you need\n    * ``onClickLink``: function called when a link is clicked, you can customize it if you need\n\nExample Usage\n-------------\n\nVery basic:\n\n.. code-block:: html\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <link href=\"src/netjsongraph.css\" rel=\"stylesheet\">\n            <!-- theme can be easily customized via css -->\n            <link href=\"src/netjsongraph-theme.css\" rel=\"stylesheet\">\n        </head>\n        <body>\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n            <script src=\"src/netjsongraph.js\"></script>\n            <script>d3.netJsonGraph(\"netjson.json\");</script>\n        </body>\n    </html>\n\nShow graph in a container:\n\n.. code-block:: html\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link href=\"src/netjsongraph.css\" rel=\"stylesheet\">\n        <!-- theme can be easily customized via css -->\n        <link href=\"src/netjsongraph-theme.css\" rel=\"stylesheet\">\n        <style type=\"text/css\">\n            body {\n                font-family: Arial, sans-serif;\n                font-size: 13px;\n            }\n\n            #network-graph{\n                width: 1000px;\n                height: 800px;\n                margin: 0 auto;\n                border: 1px solid #ccc;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"network-graph\"></div>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\"></script>\n        <script src=\"src/netjsongraph.js\"></script>\n        <script>\n            d3.netJsonGraph(\"netjson.json\", {\n                el: \"#network-graph\"\n            });\n        </script>\n    </body>\n    </html>\n\nStyling\n-------\n\nThe library comes with a default theme and a default style (color) for nodes,\nyou can disable this by passing the option\n``defaultStyle: false`` and define your own CSS rules.\n\nHere's a fulle example of how to show green links and dark green nodes:\n\n.. code-block:: html\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link href=\"src/netjsongraph.css\" rel=\"stylesheet\">\n        <!-- custom theme example -->\n        <style type=\"text/css\">\n            body {\n                font-family: Arial, sans-serif;\n                font-size: 13px;\n            }\n\n            .njg-overlay{\n                width: auto;\n                height: auto;\n                min-width: 200px;\n                max-width: 400px;\n                border: 1px solid #000;\n                border-radius: 2px;\n                background: rgba(0, 0, 0, 0.7);\n                top: 10px;\n                right: 10px;\n                padding: 0 15px;\n                font-family: Arial, sans-serif;\n                font-size: 14px;\n                color: #fff\n            }\n\n            .njg-node {\n                fill: #008000;\n                fill-opacity: 0.8;\n                stroke: #008000;\n                stroke-width: 1px;\n                cursor: pointer;\n            }\n            .njg-node:hover,\n            .njg-node.njg-open{\n                fill-opacity: 1;\n            }\n\n            .njg-link {\n                stroke: #00ff00;\n                stroke-width: 2;\n                stroke-opacity: .5;\n                cursor: pointer;\n            }\n            .njg-link:hover,\n            .njg-link.njg-open{\n                stroke-width: 3;\n                stroke-opacity: 1\n            }\n        </style>\n    </head>\n    <body>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.12/d3.min.js\"></script>\n        <script src=\"src/netjsongraph.js\"></script>\n        <script>d3.netJsonGraph(\"netjson.json\", { defaultStyle: false });</script>\n    </body>\n    </html>\n\nContributing\n------------\n\n1. Fork it!\n2. Create your feature branch: git checkout -b my-new-feature\n3. Commit your changes: git commit -am 'Add some feature'\n4. Push to the branch: git push origin my-new-feature\n5. Submit a pull request :D\n\nLicense\n-------\n\n`BSD 3-Clause License <https://github.com/interop-dev/netjsongraph.js/blob/master/LICENSE>`__.\n",
  "readmeFilename": "README.rst",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/netjson/netjsongraph.js.git"
  },
  "scripts": {
    "build": "webpack --config webpack.config.prod.js",
    "prepublish": "npm run build",
    "start": "webpack-dev-server  --config webpack.config.js",
    "test": "test"
  },
  "version": "0.1.3"
}
